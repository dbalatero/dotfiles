#!/bin/bash

# Set script to exit immediately if a command fails
set -e

# Print colored messages
function print_msg() {
  echo -e "\e[1;34m>> $1\e[0m"
}

function print_success() {
  echo -e "\e[1;32m>> $1\e[0m"
}

function print_warning() {
  echo -e "\e[1;33m>> $1\e[0m"
}

# Check if running as root
if [ "$(id -u)" -eq 0 ]; then
  echo "This script should NOT be run as root or with sudo."
  echo "The AUR helpers should be run as a regular user."
  exit 1
fi

# Update system first
print_msg "Checking for system updates..."
if sudo pacman -Sy &>/dev/null; then
  # Only perform full upgrade if there are updates available
  if pacman -Qu &>/dev/null; then
    print_msg "System updates available. Upgrading..."
    sudo pacman -Syu --noconfirm
    print_success "System updated successfully!"
  else
    print_success "System is already up to date."
  fi
fi

# Install necessary dependencies only if they're not already installed
print_msg "Checking for required dependencies..."
DEPS_TO_INSTALL=""
for dep in base-devel git; do
  if ! pacman -Q $dep &>/dev/null; then
    DEPS_TO_INSTALL="$DEPS_TO_INSTALL $dep"
  fi
done

if [ -n "$DEPS_TO_INSTALL" ]; then
  print_msg "Installing required dependencies:$DEPS_TO_INSTALL..."
  sudo pacman -S --needed --noconfirm $DEPS_TO_INSTALL
  print_success "Dependencies installed!"
else
  print_success "All required dependencies are already installed."
fi

# Create a directory for AUR packages if it doesn't exist
if [ ! -d ~/aur ]; then
  print_msg "Creating AUR directory..."
  mkdir -p ~/aur
  print_success "AUR directory created."
else
  print_success "AUR directory already exists."
fi

# Check if yay is already installed
if command -v yay &>/dev/null; then
  print_success "yay is already installed."
else
  print_msg "Installing yay AUR helper..."
  # Check if yay directory exists and remove if it's there
  if [ -d ~/aur/yay ]; then
    rm -rf ~/aur/yay
  fi

  cd ~/aur
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
  cd ~
  print_success "yay installed successfully!"
fi

# Configure makepkg for parallel compilation if not already set
print_msg "Checking makepkg configuration..."
MAKEPROCESSORS=$(nproc)
if [ -f /etc/makepkg.conf ]; then
  if grep -q "^MAKEFLAGS=\"-j$MAKEPROCESSORS\"" /etc/makepkg.conf; then
    print_success "makepkg already configured for parallel compilation."
  else
    print_msg "Configuring makepkg for parallel compilation..."
    # Check if MAKEFLAGS is commented out or already set
    if grep -q "^#MAKEFLAGS=" /etc/makepkg.conf; then
      # Uncomment and set MAKEFLAGS
      sudo sed -i "s/^#MAKEFLAGS=.*/MAKEFLAGS=\"-j$MAKEPROCESSORS\"/g" /etc/makepkg.conf
    elif grep -q "^MAKEFLAGS=" /etc/makepkg.conf; then
      # Replace existing MAKEFLAGS
      sudo sed -i "s/^MAKEFLAGS=.*/MAKEFLAGS=\"-j$MAKEPROCESSORS\"/g" /etc/makepkg.conf
    else
      # Add MAKEFLAGS if it doesn't exist
      echo "MAKEFLAGS=\"-j$MAKEPROCESSORS\"" | sudo tee -a /etc/makepkg.conf > /dev/null
    fi
    print_success "makepkg configured for parallel compilation (-j$MAKEPROCESSORS)."
  fi
fi

# Update AUR packages if yay is installed
if command -v yay &>/dev/null; then
  print_msg "Checking for AUR updates..."
  if yay -Qua &>/dev/null; then
    print_msg "AUR updates available. Updating..."
    yay -Sua --noconfirm
    print_success "AUR packages updated!"
  else
    print_success "AUR packages are already up to date."
  fi

  # Set up yay configuration if not already configured
  print_msg "Checking yay configuration..."
  if ! yay --save --combinedupgrade --sudoloop --answerclean All --answerdiff None &>/dev/null; then
    print_warning "Failed to save yay configuration. This is normal on first run."
  else
    print_success "yay configuration applied."
  fi
fi

print_success "AUR setup completed successfully!"
echo ""
echo "Basic usage of yay:"
echo "  yay -S package-name     # Install a package from AUR or repositories"
echo "  yay -Ss keyword         # Search for packages"
echo "  yay -Syu                # Update all packages (repo and AUR)"
echo "  yay -Yc                 # Clean unneeded dependencies"
echo ""
echo "For more information, run: yay --help"

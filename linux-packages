#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/lib/shared.sh"

case $(uname -m) in
  x86_64) arch=amd64 ;;
  aarch64|arm64) arch=arm64 ;;
  *) echo "unsupported architecture" && exit 1 ;;
esac
readonly arch

# Install starship
function install_starship() {
  if ! command_exists starship ; then
    if is_stripe_devbox ; then
      case "${arch}" in
        arm64) ss_arch=aarch64 ;;
        amd64) ss_arch=x86_64 ;;
        *) exit 1 ;;
      esac

      curl -sSfL "https://artifactory-content.stripe.build/artifactory/github-releases/starship/starship/releases/download/v1.23.0/starship-${ss_arch}-unknown-linux-musl.tar.gz" \
        | sudo tar --no-same-owner -xz -C /usr/local/bin starship
    else
      sudo curl -sS https://starship.rs/install.sh | sh
    fi
  fi
}

install_starship

sudo apt-get update

sudo apt-get install -y \
  autojump \
  bat \
  direnv \
  eza \
  libreadline-dev \
  libreadline8t64 \
  openssl \
  ripgrep \
  tmux \
  tmuxinator \
  wget \
  xz-utils \
  zplug \
  zsh

function install_github_release() {
  local bin_name="$1"
  local url="$2"

  if [ -x "$HOME/.local/bin/$bin_name" ]; then
    echo "Skipping install of $bin_name, already exists"
    return 0
  fi

  echo "Installing $bin_name from $url"

  mkdir -p ~/.local/bin
  pushd ~/.local/bin >/dev/null || exit

  curl -L "$url" -o "$bin_name"
  chmod +x "$bin_name"

  popd >/dev/null || exit
}

install_github_release diff-so-fancy \
  https://github.com/so-fancy/diff-so-fancy/releases/download/v1.4.4/diff-so-fancy

# Grab the latest nvim dev version (0.11.x at time of writing)
install_github_release nvim \
  https://github.com/neovim/neovim/releases/download/nightly/nvim-linux-arm64.appimage

# install packages
if [ -d "$HOME/.local/share/nvim/lazy" ]; then
  echo "Skipping lazy.nvim init install, packages already exist"
else
  ~/.local/bin/nvim --headless \
    +':Lazy install' \
    +':TSUpdate' \
    +qa
fi

function install_fzf() {
  local target_dir="$HOME/.local/bin"

  if [ -f "$target_dir/fzf" ]; then
    echo "Skipping fzf install, already exists!"
    return 0
  fi

  # Define the URL and the target directory
  local fzf_url="https://github.com/junegunn/fzf/releases/download/v0.60.0/fzf-0.60.0-linux_arm64.tar.gz"
  local tar_file="fzf-0.60.0-linux_arm64.tar.gz"

  # Download the tar.gz file
  curl -L "$fzf_url" -o "$tar_file" || {
    echo "Error downloading $fzf_url"
    return 1
  }

  # Extract the tar.gz file to ~/.local/bin
  tar -xzf "$tar_file" -C "$target_dir" || {
    echo "Error extracting $tar_file"
    return 1
  }

  # Verify that fzf exists
  if [ ! -f "$target_dir/fzf" ]; then
    echo "fzf not found in $target_dir"
    return 1
  fi

  # Set executable permissions
  chmod +x "$target_dir/fzf" || {
    echo "Error setting permissions on $target_dir/fzf"
    return 1
  }

  # Delete the downloaded tar.gz file
  rm "$tar_file"

  echo "fzf installed successfully to $target_dir!"
}

install_fzf
